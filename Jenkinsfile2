pipeline {
    agent any

    environment {

        
        // Application configuration
        BACKEND_IMAGE = 'kolizo/backend-app'
        FRONTEND_IMAGE = 'kolizo/frontend-app'
    }

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Docker image tag to deploy')
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    // Here you can use params.IMAGE_TAG safely
                    if (!params.IMAGE_TAG?.trim()) {
                        error "IMAGE_TAG parameter is required but was not provided"
                    }
                    echo "Deploying images with tag: ${params.IMAGE_TAG}"
                }
            }
        }

        stage('Install AWS CLI') {
            steps {
                sh '''
                    # Install AWS CLI without sudo
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip -o awscliv2.zip
                    ./aws/install -i /var/jenkins_home/aws-cli -b /var/jenkins_home/bin
                    export PATH=/var/jenkins_home/bin:$PATH
                    aws --version
                '''
            }
        }

        
        stage('Configure kubectl') {
            steps {
                sh """
                    # Configure AWS CLI
                    aws configure set aws_access_key_id ${env.AWS_ACCESS_KEY_ID}
                    aws configure set aws_secret_access_key ${env.AWS_SECRET_ACCESS_KEY}
                    aws configure set region ${env.AWS_REGION}
                    
                    # Update kubeconfig
                    aws eks update-kubeconfig --name my-app-cluster --region ${env.AWS_REGION}
                    
                    # Check namespace
                    kubectl get namespace my-app || kubectl create namespace my-app
                """
            }
        }


        stage('Deploy to EKS') {
            steps {
                script {
                    // Create manifests and deploy
                    writeFile file: 'backend-deployment.yaml', text: """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: ${BACKEND_IMAGE}:${params.IMAGE_TAG}
        ports:
        - containerPort: 8080
"""

                    // Apply manifests
                    sh """
                    kubectl apply -f backend-deployment.yaml
                    """
                }
            }
        }
    }

    post {
        success {
            echo "EKS deployment completed successfully!"
        }
        failure {
            echo "EKS deployment failed. Check the logs for details."
        }
    }
}